/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package leap.orm;

import java.util.Set;

import leap.core.BeanFactory;
import leap.core.annotation.ConfigProperty;
import leap.core.annotation.Configurable;
import leap.core.ioc.PostCreateBean;
import leap.lang.New;
import leap.lang.naming.NamingStyles;
import leap.orm.config.OrmConfigProperties;

@Configurable(prefix="orm")
public class DefaultOrmConfig implements OrmConfig,PostCreateBean {
	
	protected long        defaultMaxResults          = -1;
	protected String      optimisticLockFieldName    = OrmConstants.LOCK_VERSION;
	protected boolean     autoGenerateColumns        = false;
	protected boolean     autoGenerateOptimisticLock = false;
	protected Set<String> autoGeneratedFieldNames    = New.linkedHashSet(OrmConstants.CREATED_AT,OrmConstants.UPDATED_AT);
	protected String      tableNamingStyle           = NamingStyles.NAME_LOWER_UNDERSCORE;
	protected String      columnNamingStyle          = NamingStyles.NAME_LOWER_UNDERSCORE;

	@Override
    public long getDefaultMaxResults() {
	    return defaultMaxResults;
    }
	
	@Override
    public String getOptimisticLockFieldName() {
	    return optimisticLockFieldName;
    }

	public boolean isAutoGenerateColumns() {
	    return autoGenerateColumns;
    }
	
	public boolean isAutoGenerateOptimisticLock() {
		return autoGenerateOptimisticLock;
	}

	@ConfigProperty
	public void setAutoGenerateOptimisticLock(boolean autoGenerateOptimisticLockField) {
		this.autoGenerateOptimisticLock = autoGenerateOptimisticLockField;
	}

	public Set<String> getAutoGeneratedFieldNames() {
	    return autoGeneratedFieldNames;
    }
	
	@ConfigProperty
	public void setOptimisticLockFieldName(String optimisticLockFieldName) {
		this.optimisticLockFieldName = optimisticLockFieldName;
	}

	@ConfigProperty
	public void setDefaultMaxResults(long maxResults) {
		this.defaultMaxResults = maxResults;
	}

	@ConfigProperty
	public void setAutoGenerateColumns(boolean autoGenerateFieldsForModel) {
		this.autoGenerateColumns = autoGenerateFieldsForModel;
	}

	@ConfigProperty
	public void setAutoGeneratedFieldNames(Set<String> autoGeneratedFieldsForModel) {
		this.autoGeneratedFieldNames = autoGeneratedFieldsForModel;
	}
	
	@Override
    public String getTableNamingStyle() {
	    return tableNamingStyle;
    }
	
	@ConfigProperty
	public void setTableNamingStyle(String tableNamingStyle) {
		this.tableNamingStyle = tableNamingStyle;
	}

	@Override
    public String getColumnNamingStyle() {
	    return columnNamingStyle;
    }
	
	@ConfigProperty
	public void setColumnNamingStyle(String columnNamingStyle) {
		this.columnNamingStyle = columnNamingStyle;
	}

	@Override
    public void postCreate(BeanFactory factory) throws Throwable {
		OrmConfigProperties config = factory.getAppConfig().removeExtension(OrmConfigProperties.class);
		if(null != config) {
			if(null != config.getDefaultMaxResult()) {
				this.setDefaultMaxResults(config.getDefaultMaxResult());
			}

            if(null != config.getAutoGenerateColumns()) {
                this.setAutoGenerateColumns(config.getAutoGenerateColumns());
            }
		}
    }
}